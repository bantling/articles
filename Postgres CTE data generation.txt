Using Postgres CTEs for data generation

Postgres supports Common Table Expressions (CTEs), which can be used to combine multiple queries together to perform multiple operations that are related in some way.

One possible use is to generate data to insert. If you only have one table to insert into, then a simple INSERT/SELECT statement will do. But if you have a parent/child relationship, then you need to use parent ids when inserting the children. Things get complicated if you want multiple children per parent, and want some randomized data.

The first issue to consider for generating parent/child data is that we need what I will call a "unique cross product". Suppose we perform a cartesian cross product query using the generate_series function, which generates a series of rows containing a contiguous range of integers. We'll combine this function with gen_random_uuid to demonstrate the problem:

CREATE EXTENSION pgcrypto;
SELECT parentId, childId
  FROM (SELECT gen_random_uuid() parentId FROM generate_series(1, 2)) t1,
       (SELECT gen_random_uuid() childId FROM generate_series(1, 3)) t2;

               parentid               |               childid                
--------------------------------------+--------------------------------------
 de0846e7-5548-4d4f-b3fe-326dfd5f8e6c | 365ec82a-f773-48aa-986f-d2e29a1846ae
 de0846e7-5548-4d4f-b3fe-326dfd5f8e6c | 16ae2723-c088-43ab-855f-482d6d82cf2a
 de0846e7-5548-4d4f-b3fe-326dfd5f8e6c | 5fd7e5d5-a4fe-4fac-a5bb-bcf7a071e8cd
 ece78bf0-0927-4712-86ed-feecfafc8aca | 365ec82a-f773-48aa-986f-d2e29a1846ae
 ece78bf0-0927-4712-86ed-feecfafc8aca | 16ae2723-c088-43ab-855f-482d6d82cf2a
 ece78bf0-0927-4712-86ed-feecfafc8aca | 5fd7e5d5-a4fe-4fac-a5bb-bcf7a071e8cd

We asked for 2 parents multiplied by 3 children = 6 rows. There is an obvious problem here: the parentId values are unique, but the childIds are not - this is fine for inserting the first parent/child, but inserting the second parent/child will fail with primary key errors for the children. The above cartesian cross product is exactly what you'd expect, but by using CTEs in a very specific way, we can generate a unique cross product, where the childIds are generated for each parentId:

WITH parentData(parentId) AS (
  SELECT gen_random_uuid() parentId,
         generate_series(1, 2)
),
childData(parentId, childId) AS (
  SELECT parentId,
         gen_random_uuid() childId,
         generate_series(1, 3)
    FROM parentData
)
SELECT parentId, childId
  FROM childData;

               parentid               |               childid                
--------------------------------------+--------------------------------------
 1e0afe4a-35eb-4247-a989-9599f865e022 | 055c8de0-b672-419c-949f-26250469b452
 1e0afe4a-35eb-4247-a989-9599f865e022 | 7e776a41-d3b2-4be1-a449-7a01ef2959c5
 1e0afe4a-35eb-4247-a989-9599f865e022 | 2b2b8194-6a14-4a0d-ba7e-62dac9ec54b2
 98485270-d109-4031-95a6-04e4e6e1f8ba | cdbe2cf3-40dd-4b12-b26e-efe4cdde6b5d
 98485270-d109-4031-95a6-04e4e6e1f8ba | a2ebe645-c15b-4546-8315-fbad7c0a1347
 98485270-d109-4031-95a6-04e4e6e1f8ba | d5c5714b-7237-45e9-bf28-6ea0a0e5b695

The query structure is as follows:
1. CTE #1 - WITH parentData(parentId) AS ...
2. CTE #2 - childData(parentId, childId, ...) AS...
3. Main Query - SELECT parentId, childId, ...

The secret sauce for generating new child ids for each parent is:
1. CTE #2 depends on CTE #1 in FROM clause
2. Main query only depends on CTE #2 - it has no reference to CTE #1

There are some variations that will still produce a unique cross product, just be aware that a slight change can wind up returning the usual cartesian cross product that we don't want. So far the above queries do not insert anything. We can make them into Data Modifying CTEs (DMCTEs) by taking advantage of the fact that any DML query in Postgres becomes a pseudo-select query by adding a RETURNING clause:

CREATE TABLE parent(id UUID PRIMARY KEY);
CREATE TABLE child(
  id UUID PRIMARY KEY,
  parentId UUID NOT NULL REFERENCES parent(id)
);

WITH parentData(parentId) AS (
  INSERT INTO parent(id)
  SELECT gen_random_uuid() parentId
    FROM generate_series(1, 2)
  RETURNING id
),
childData(parentId, childId) AS (
  SELECT parentId,
         gen_random_uuid() childId,
         generate_series(1, 3)
    FROM parentData
)
INSERT INTO child(parentId, id)
SELECT parentId, childId
  FROM childData;
  
For demonstration purposes, we don't need an index for the foreign key. Notice how the parentData CTE has the generate_series() call moved into the FROM clause - this is neccessary since we can cannot select extra columns not referenced by the insert. Let's check the results:

select * from parent;
                  id                  
--------------------------------------
 48a026e5-3b71-4d65-aac6-4fc0bbfeecbd
 6e5e79f6-38c4-48b5-b83f-ec3f5963ec6f

select parentId, id from child;
               parentid               |                  id                  
--------------------------------------+--------------------------------------
 48a026e5-3b71-4d65-aac6-4fc0bbfeecbd | c122470f-4f48-4315-84bd-60fb7a44d8f4
 48a026e5-3b71-4d65-aac6-4fc0bbfeecbd | aac4b9da-7cb1-4597-9a9b-ed2f9adc25a4
 48a026e5-3b71-4d65-aac6-4fc0bbfeecbd | 6f2e7467-a482-4aa6-8f04-39a9f9442a4f
 6e5e79f6-38c4-48b5-b83f-ec3f5963ec6f | 52ca5e74-7cd4-4857-b55d-53c734652d3b
 6e5e79f6-38c4-48b5-b83f-ec3f5963ec6f | 9cb4ab27-eaa0-43de-8b22-8f9ef26a1896
 6e5e79f6-38c4-48b5-b83f-ec3f5963ec6f | a01e6a5b-3aa9-4c9c-aea6-0cf3c4405545

One important aspect of CTEs is they are atomic - either the whole query succeeds or the whole query fails. This means we can use CTEs instead of more complex transactional code that is easy to get wrong, at the expense of writng a more complex query that might be a bit harder for noobs to understand.

If you were reading carefully, you'll notice I mentioned above that the returning clause is a pseudo-select query. One limitation is we cannot use a returning clause in a subselect:

SELECT id
  FROM (
         INSERT INTO parent(id)
         SELECT parentId
           FROM (SELECT gen_random_uuid() parentId FROM generate_series(1, 2)) t
         RETURNING id
       ) t;

ERROR:  syntax error at or near "INTO"
LINE 3:          INSERT INTO parent(id)

This means our DMCTEs cannot try to wrap a returning clause to try and select more data than that provided by the returning clause. However, a returning clause is not limited to returning only columns from the inserted/updated rows:

INSERT INTO parent(id)
SELECT parentId
  FROM (SELECT gen_random_uuid() parentId FROM generate_series(1, 2)) t
RETURNING id, 1, 'abc';

                  id                  | ?column? | ?column? 
--------------------------------------+----------+----------
 1111ace9-47f3-4e77-aa78-b0a588120172 |        1 | abc
 2a700e56-3f2c-480e-8169-2b326d040ee2 |        1 | abc

Let's say we want to vary the number of children. EG, we have customer parents and child addresses, and we want to vary how many addresses each customer has to be more realistic - eg, some customers may have only a primary address, others may have primary and mailing addresses, etc. We'll assume the following:
1. Three kinds of addresses exist: primary (P), mailing (M), and billing (B)
2. There can be at most one of each type

First, let's see how to vary the number of children in a CTE:

WITH parentData(parentId, numChildren) AS (
  SELECT gen_random_uuid(),
         trunc(random() * 3)::int + 1 numChildren,
         generate_series(1, 2)
),
childData(parentId, childId) AS (
  SELECT parentId,
         gen_random_uuid() childId,
         generate_series(1, numChildren)
    FROM parentData
)
SELECT parentId, childId
  FROM childData;

               parentid               |               childid                
--------------------------------------+--------------------------------------
 cae92bf7-f335-44a0-ae9b-d11fea79ec9d | fa2eb82e-d24c-43ff-a4cf-70c1ef88b912
 cae92bf7-f335-44a0-ae9b-d11fea79ec9d | 01387ba7-8850-4c15-9cda-793db0e1d45d
 cae92bf7-f335-44a0-ae9b-d11fea79ec9d | 12e2fd74-b7f3-4bb8-913a-341fe491994d
 c04f428b-e6a2-4faf-93b1-d99526198d6d | 170500c9-a581-416d-b4c2-51329ac83001
         
Varying the number of children just requires two things:
1. CTE #1 uses random in the SELECT expression to guarantee the random number varies across parent ids
2. CTE #2 uses the random number from CTE #1 as the upper bound in the generate_series() function call instead of a hard-coded value 

To generate more realistic customer data, we can vary the data by choosing randomly from hard-coded arrays:

SELECT firstNames[trunc(random() * array_length(firstNames, 1))::int + 1]
  FROM (SELECT array['John', 'Mary', 'Ken', 'Suzy'] firstNames) t,
       generate_series(1, 5);

 firstnames 
------------
 Ken
 Suzy
 John
 Suzy
 Ken

By using array_length, we can add more values to the array without changing the select clause. Unlike the generate_series function, Postgres forces the array to be a subselect. Arrays are one-based, and accessing any subscript outside the closed range [1, length] will return null.

We may want data that consists of multiple pieces of information that need to be related. For example, we might want to randomly choose address data from the US and Canada, without choosing non-sensical data like a Canadian province and the US country. This can be done by using a three dimensional array. In this case, it is easier to just hard-code the number of array elements instead of using array_length:

SELECT addressData[cIdx][aIdx][1] line,
       addressData[cIdx][aIdx][2] city,
       addressData[cIdx][aIdx][3] region,
       addressData[cIdx][aIdx][4] country,
       addressData[cIdx][aIdx][5] postalCode
  FROM (SELECT array[
                 [
                   ['56 Sparks St', 'Ottawa', 'Ontario', 'Canada', 'K1P 5A9'],
                   ['5425 Sackville St', 'Halifax', 'Nova Scotia', 'Canada', 'B3J 3Y3']
                 ],
                 [
                   ['19274 US Highway 85', 'Belle Fourche', 'South Dakota', '57717', 'USA'],
                   ['123 Sesame St', 'New York', 'New York', '10009', 'USA']
                 ]
               ] addressData
       ) t1,
       (SELECT trunc(random() * 2)::int + 1 cIdx,
               trunc(random() * 2)::int + 1 aIdx,
               generate_series(1, 3)
       ) t2;

        line         |     city      |    region    | country | postalcode 
---------------------+---------------+--------------+---------+------------
 123 Sesame St       | New York      | New York     | 10009   | USA
 19274 US Highway 85 | Belle Fourche | South Dakota | 57717   | USA
 56 Sparks St        | Ottawa        | Ontario      | Canada  | K1P 5A9

The format function is a printf like function that can be used to generate a JSON string. We can combine the techniques used so far and use the format function to generate random customer and address JSON strings with varying numbers of addresses per customer:

DROP TABLE parent;
DROP TABLE child;
CREATE TABLE customer(JSONB payload);
CREATE TABLE address(JSONB payload);

WITH customerData(customerId, numChildren) AS (
  INSERT INTO customer
  SELECT format(
           '{' ||
             '"id": "%s", ' ||
             '"firstName": "%s", ' ||
             '"lastName": "%s"' ||
           '}',
           customerId,
           firstNames[trunc(random() * array_length(firstNames, 1))::int + 1],
           lastNames[trunc(random() * array_length(lastNames, 1))::int + 1]
         )::jsonb payload
    FROM (
           SELECT gen_random_uuid() customerId,
                  array['John', 'Mary', 'Ken', 'Suzy'] firstNames,
                  array['Doe', 'Smith', 'Jones', 'Ross'] lastNames,
                  generate_series(1, 2)
         ) t
  RETURNING payload ->> 'id',
            trunc(random() * 3)::int + 1 numChildren
),
addressData(customerId, addressId, countryIdx, addressIdx, lineNum) AS (
  SELECT customerId,
         gen_random_uuid() addressId,
         trunc(random() * 2)::int + 1 countryIdx,
         trunc(random() * 2)::int + 1 addressIdx,
         generate_series(1, numChildren) lineNum
    FROM customerData
)
INSERT INTO address
SELECT format(
         '{' ||
           '"id":"%s", ' ||
           '"customerId":"%s", ' ||
           '"line": "%s", ' ||
           '"city": "%s", ' ||
           '"region": "%s", ' ||
           '"postalCode": "%s", ' ||
           '"country": "%s", ' ||
           '"type": "%s"'
         '}',
         addressId,
         customerId,
         addresses[countryIdx][addressIdx][1],
         addresses[countryIdx][addressIdx][2],
         addresses[countryIdx][addressIdx][3],
         addresses[countryIdx][addressIdx][4],
         addresses[countryIdx][addressIdx][5],
         addressTypes[lineNum]
       )::jsonb
  FROM (
         SELECT addressId,
                customerId,
                countryIdx,
                addressIdx,
                lineNum,
                array[
                  [
                    ['56 Sparks St', 'Ottawa', 'Ontario', 'Canada', 'K1P 5A9'],
                    ['5425 Sackville St', 'Halifax', 'Nova Scotia', 'Canada', 'B3J 3Y3']
                  ],
                  [
                    ['19274 US Highway 85', 'Belle Fourche', 'South Dakota', '57717', 'USA'],
                    ['123 Sesame St', 'New York', 'New York', '10009', 'USA']
                  ]
                ] addresses,
                array['P', 'B', 'M'] addressTypes
           FROM addressData
       ) t;

SELECT * FROM customer;
                                         payload                                          
------------------------------------------------------------------------------------------
 {"id": "52d22ac1-f69c-4f76-bcac-a63c5f72c7fd", "lastName": "Jones", "firstName": "Ken"}
 {"id": "01c268c4-6101-48f4-ae7e-236386bede68", "lastName": "Jones", "firstName": "John"}

SELECT * FROM address;

 {"id": "bf1d4143-d1b8-48ca-9683-201d8af1f08a", "city": "Ottawa", "line": "56 Sparks St", "type": "P", "region": "Ontario", "country": "K1P 5A9", "customerId": "52d22ac1-f69c-4f76-bcac-a63c5f72c7fd", "postalCode": "Canada"}
 {"id": "1d6709c9-bc2b-4ff0-8b18-94f33827d6e1", "city": "New York", "line": "123 Sesame St", "type": "P", "region": "New York", "country": "USA", "customerId": "01c268c4-6101-48f4-ae7e-236386bede68", "postalCode": "10009"}
 {"id": "7ccb0a50-8175-483b-a400-1aa8e63f0312", "city": "Ottawa", "line": "56 Sparks St", "type": "B", "region": "Ontario", "country": "K1P 5A9", "customerId": "01c268c4-6101-48f4-ae7e-236386bede68", "postalCode": "Canada"}
 {"id": "d55b5747-6513-4c8d-b9e4-a73566a889a1", "city": "New York", "line": "123 Sesame St", "type": "M", "region": "New York", "country": "USA", "customerId": "01c268c4-6101-48f4-ae7e-236386bede68", "postalCode": "10009"}

The DMCTEs can be put into a script that gets optionally copied into a docker container by a build argument in a Dockerfile:

FROM mdillon/postgis:11-alpine
# Build arg to specify additional scripts to add
ARG extra_scripts=
# Copy output scripts
COPY *.sql ${extra_scripts} /docker-entrypoint-initdb.d/

If the build arg is not specified, then the extra_scripts will default to the empty string and only "*.sql" gets copied. The build arg could simply refer to "*.sql" in a different directory.

By combing DMCTEs with a handful of functions, we can generate reasonable random data for purposes such as local development and testing, and have different seed data scripts per environment. If you have some other method for generating testing data, or other variations of DMCTEs than those presented, please share them.
